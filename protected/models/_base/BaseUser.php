<?php

/**
 * This is the model base class for the table "tbl_user".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "User".
 *
 * Columns in table "tbl_user" available as properties of the model,
 * followed by relations of table "tbl_user" available as properties of the model.
 *
 * @property integer $id
 * @property string $username
 * @property string $email
 * @property string $password
 * @property string $create_time
 * @property string $last_login_time
 * @property string $update_time
 * @property string $mobile
 * @property string $phone
 *
 * @property Place[] $tblPlaces
 */
abstract class BaseUser extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'tbl_user';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'User|Users', $n);
	}

	public static function representingColumn() {
		return 'username';
	}

	public function rules() {
		return array(
			array('username, email, password', 'required'),
			array('username, email, password, mobile, phone', 'length', 'max'=>255),
			array('create_time, last_login_time, update_time', 'safe'),
			array('create_time, last_login_time, update_time, mobile, phone', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, username, email, password, create_time, last_login_time, update_time, mobile, phone', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'tblPlaces' => array(self::MANY_MANY, 'Place', 'tbl_user_has_place(user_id, place_id)'),
		);
	}

	public function pivotModels() {
		return array(
			'tblPlaces' => 'UserHasPlace',
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'username' => Yii::t('app', 'Username'),
			'email' => Yii::t('app', 'Email'),
			'password' => Yii::t('app', 'Password'),
			'create_time' => Yii::t('app', 'Create Time'),
			'last_login_time' => Yii::t('app', 'Last Login Time'),
			'update_time' => Yii::t('app', 'Update Time'),
			'mobile' => Yii::t('app', 'Mobile'),
			'phone' => Yii::t('app', 'Phone'),
			'tblPlaces' => null,
		);
	}
	/**
	 * Prepares create_user_id and update_user_id attributes before
	 saving.
	 */
	protected function beforeSave()
	{
	  if(null !== Yii::app()->user)
	    $id=Yii::app()->user->id;
	  else
	    $id=1;
	  if($this->isNewRecord)

	  return parent::beforeSave();
	}
	/**
	 * Attaches the timestamp behavior to update our create and update
	 times
	 */
	public function behaviors()
	{
	  return array(
	    'CTimestampBehavior' => array(
	      'class' => 'zii.behaviors.CTimestampBehavior',
	      'createAttribute' => 'create_time',
	      'updateAttribute' => 'update_time',
	      'setUpdateOnCreate' => true,
	    ),
	  );
	}
	
	
	
	/**
	 * Checks if the given password is correct.
	 * @param string the password to be validated
	 * @return boolean whether the password is valid
	 */
	public function validatePassword($password)
	{
	  return $this->hashPassword($password)===$this->password;
	}
	
	/**
	 * apply a hash on the password before we store it in the database
	 */
	protected function afterValidate()
	{
	  parent::afterValidate();
	  if(!$this->hasErrors())
	    $this->password = $this->hashPassword($this->password);
	}
	/**
	 * Generates the password hash.
	 * @param string password
	 * @return string hash
	 */
	public function hashPassword($password)
	{
	  return md5($password);
	}
	
	
	
	
	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('username', $this->username, true);
		$criteria->compare('email', $this->email, true);
		$criteria->compare('password', $this->password, true);
		$criteria->compare('create_time', $this->create_time, true);
		$criteria->compare('last_login_time', $this->last_login_time, true);
		$criteria->compare('update_time', $this->update_time, true);
		$criteria->compare('mobile', $this->mobile, true);
		$criteria->compare('phone', $this->phone, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}